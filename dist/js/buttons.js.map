{"version":3,"sources":["webpack:///webpack/bootstrap e999a493326e7d2f9d7f","webpack:///./resources/js/editor/buttons.js"],"names":["lodash","assign","__","wp","i18n","Fragment","element","addFilter","hooks","components","TextControl","PanelBody","createHigherOrderComponent","compose","InspectorControls","editor","addMyCustomBlockControls","isValidBlockType","props","scheduledStart","nextValue","validBlockTypes","settings","type","blockType","extraProps","attributes"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;cChDmBA,M;IAAXC,S,QAAAA,M;IACAC,KAAOC,GAAGC,IAAHD,CAAPD,E;IACAG,WAAaF,GAAGG,OAAHH,CAAbE,Q;IACAE,YAAcJ,GAAGK,KAAHL,CAAdI,S;qBAC2BJ,GAAGM,U;IAA9BC,c,eAAAA,W;IAAaC,Y,eAAAA,S;IACbC,6BAA+BT,GAAGU,OAAHV,CAA/BS,0B;IACAE,oBAAsBX,GAAGY,MAAHZ,CAAtBW,iB;;AAIR;;;;;;;;;AAQO,IAAME,2BAA2B,2BAA4B,qBAAiB;;AAEjF,SAAO,iBAAa;;AAEhB;AACA,QAAKC,iBAAkBC,MAAlBD,SAAkCC,MAAvC,YAA0D;AACtD,aACI,oCACI,+BADJ,KACI,CADJ,EAEI,6CACI,iCAAW,OAAQhB,GAAnB,yBAAmBA,CAAnB,IACI;AACI,eAAQA,GADZ,mBACYA,CADZ;AAEI,cAAOA,GAFX,uCAEWA,CAFX;AAGI,eAAQgB,mCAHZ;AAII,kBAAW,6BAAiB;AACxBA,8BAAqB;AACjBC,4BAAgBC;AADC,WAArBF;AALR,YADJ,CADJ,CAFJ,CADJ;AAkBH;;AAED,WAAO,+BAAP,KAAO,CAAP;AAxBJ;AAFoC,GAAjC,0BAAiC,CAAjC;;AA8BPX;;AAOA;;;;;AAKA,gCAAkC;;AAE9B,MAAMc,kBAAkB,CAAxB,aAAwB,CAAxB;;AAIA,SAAOA,yBAAP,IAAOA,CAAP;EAEH;;;AAKD;;;;;;;AAOO,gCAAkC;;AAExC;AACA,MAAKJ,iBAAkBK,SAAvB,IAAKL,CAAL,EAAyC;;AAExC;AACAK,0BAAsB,OAAQA,SAAR,YAA6B;AAClDH,sBAAgB;AACfI,cAAM;AADS;AADkC,KAA7B,CAAtBD;AAKA;;AAED;EAEA;;AAED;;;;;;;;;;AAUO,yDAA2D;;AAEjE;AACA,MAAKL,iBAAkBO,UAAvB,IAAKP,CAAL,EAA0C;AACzCQ,gCAA4BC,WAA5BD;AACA;;AAED;EAEA;;AAEDlB;AACAA,mF","file":"/dist/js/buttons.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e999a493326e7d2f9d7f","/**\n * Extend the default Button Block\n *\n * @package   Taproot\n * @author    Sky Shabatura <theme@sky.camp>\n * @copyright 2019 Sky Shabatura\n * @license   https://www.gnu.org/licenses/gpl-2.0.html GPL-2.0-or-later\n * @link      https://taproot-theme.com\n */\n\n\n\n\nconst { assign } = lodash;\nconst { __ } = wp.i18n;\nconst { Fragment } = wp.element;\nconst { addFilter } = wp.hooks;\nconst { TextControl, PanelBody } = wp.components;\nconst { createHigherOrderComponent } = wp.compose;\nconst { InspectorControls } = wp.editor;\n\n\n\n/**\n * Override the default edit UI to include a new block inspector control for\n * adding our custom control.\n *\n * @param {function|Component} BlockEdit Original component.\n *\n * @return {string} Wrapped component.\n */\nexport const addMyCustomBlockControls = createHigherOrderComponent( ( BlockEdit ) => {\n\n    return ( props ) => {\n\n        // If this block supports scheduling and is currently selected, add our UI\n        if ( isValidBlockType( props.name ) && props.isSelected ) {\n            return (\n                <Fragment>\n                    <BlockEdit { ...props } />\n                    <InspectorControls>\n                        <PanelBody title={ __( 'My Custom Panel Heading' ) }>\n                            <TextControl\n                                label={ __( 'My Custom Control' ) }\n                                help={ __( 'Some help text for my custom control.' ) }\n                                value={ props.attributes.scheduledStart || '' }\n                                onChange={ ( nextValue ) => {\n                                    props.setAttributes( {\n                                        scheduledStart: nextValue,\n                                    } );\n                                } } />\n                        </PanelBody>\n                    </InspectorControls>\n                </Fragment>\n            );\n        }\n\n        return <BlockEdit { ...props } />;\n    };\n}, 'addMyCustomBlockControls' );\n\naddFilter( 'editor.BlockEdit', 'my-plugin/my-control', addMyCustomBlockControls );\n\n\n\n\n\n\n/**\n * Is the passed block name one which supports our custom field?\n *\n * @param {string} name The name of the block.\n */\nfunction isValidBlockType( name ) {\n\n    const validBlockTypes = [       \n        'core/button',        \n    ];\n\n    return validBlockTypes.includes( name );\n\n}// end isValidBlockType()\n\n\n\n\n/**\n * Filters registered block settings, extending attributes with our custom data.\n *\n * @param {Object} settings Original block settings.\n *\n * @return {Object} Filtered block settings.\n */\nexport function addAttribute( settings ) {\n\n\t// If this is a valid block\n\tif ( isValidBlockType( settings.name ) ) {\n\n\t\t// Use Lodash's assign to gracefully handle if attributes are undefined\n\t\tsettings.attributes = assign( settings.attributes, {\n\t\t\tscheduledStart: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t} );\n\t}\n\n\treturn settings;\n\n}// end addAttribute()\n\n/**\n * Override props assigned to save component to inject our custom data.\n * This is only done if the component is a valid block type.\n *\n * @param {Object} extraProps Additional props applied to save element.\n * @param {Object} blockType  Block type.\n * @param {Object} attributes Current block attributes.\n *\n * @return {Object} Filtered props applied to save element.\n */\nexport function addSaveProps( extraProps, blockType, attributes ) {\n\n\t// If the current block is valid, add our prop.\n\tif ( isValidBlockType( blockType.name ) ) {\n\t\textraProps.scheduledStart = attributes.scheduledStart;\n\t}\n\n\treturn extraProps;\n\n}// end addSaveProps()\n\naddFilter( 'blocks.registerBlockType', 'my-plugin/add-attr', addAttribute );\naddFilter( 'blocks.getSaveContent.extraProps', 'my-plugin/add-props', addSaveProps );\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./resources/js/editor/buttons.js"],"sourceRoot":""}